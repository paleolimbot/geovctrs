// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_geovctrs_RCPPEXPORTS_H_GEN_
#define RCPP_geovctrs_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace geovctrs {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("geovctrs", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("geovctrs", "_geovctrs_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in geovctrs");
            }
        }
    }

    inline SEXP geovctrs_cpp_convert(SEXP data, SEXP ptype) {
        typedef SEXP(*Ptr_geovctrs_cpp_convert)(SEXP,SEXP);
        static Ptr_geovctrs_cpp_convert p_geovctrs_cpp_convert = NULL;
        if (p_geovctrs_cpp_convert == NULL) {
            validateSignature("SEXP(*geovctrs_cpp_convert)(SEXP,SEXP)");
            p_geovctrs_cpp_convert = (Ptr_geovctrs_cpp_convert)R_GetCCallable("geovctrs", "_geovctrs_geovctrs_cpp_convert");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_geovctrs_cpp_convert(Shield<SEXP>(Rcpp::wrap(data)), Shield<SEXP>(Rcpp::wrap(ptype)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline LogicalVector geovctrs_cpp_has_missing(SEXP x) {
        typedef SEXP(*Ptr_geovctrs_cpp_has_missing)(SEXP);
        static Ptr_geovctrs_cpp_has_missing p_geovctrs_cpp_has_missing = NULL;
        if (p_geovctrs_cpp_has_missing == NULL) {
            validateSignature("LogicalVector(*geovctrs_cpp_has_missing)(SEXP)");
            p_geovctrs_cpp_has_missing = (Ptr_geovctrs_cpp_has_missing)R_GetCCallable("geovctrs", "_geovctrs_geovctrs_cpp_has_missing");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_geovctrs_cpp_has_missing(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<LogicalVector >(rcpp_result_gen);
    }

    inline LogicalVector geovctrs_cpp_has_missing_or_infinite(SEXP x) {
        typedef SEXP(*Ptr_geovctrs_cpp_has_missing_or_infinite)(SEXP);
        static Ptr_geovctrs_cpp_has_missing_or_infinite p_geovctrs_cpp_has_missing_or_infinite = NULL;
        if (p_geovctrs_cpp_has_missing_or_infinite == NULL) {
            validateSignature("LogicalVector(*geovctrs_cpp_has_missing_or_infinite)(SEXP)");
            p_geovctrs_cpp_has_missing_or_infinite = (Ptr_geovctrs_cpp_has_missing_or_infinite)R_GetCCallable("geovctrs", "_geovctrs_geovctrs_cpp_has_missing_or_infinite");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_geovctrs_cpp_has_missing_or_infinite(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<LogicalVector >(rcpp_result_gen);
    }

}

#endif // RCPP_geovctrs_RCPPEXPORTS_H_GEN_
